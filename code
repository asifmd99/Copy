import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.oxm.jaxb.Jaxb2Marshaller;
import org.springframework.ws.client.core.WebServiceTemplate;
import org.springframework.ws.client.support.interceptor.ClientInterceptor;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.soap.SoapMessage;
import org.springframework.ws.transport.WebServiceMessageSender;
import org.springframework.ws.transport.http.HttpComponentsMessageSender;

import java.io.IOException;

@Configuration
public class SoapClientConfig {

    @Bean
    public Jaxb2Marshaller marshaller() {
        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();
        marshaller.setContextPath("com.example.generated"); // Set the root package of your generated classes
        return marshaller;
    }

    @Bean
    public WebServiceTemplate webServiceTemplate(Jaxb2Marshaller marshaller) {
        WebServiceTemplate template = new WebServiceTemplate();
        template.setMarshaller(marshaller);
        template.setUnmarshaller(marshaller);

        // Add an interceptor to log request and response
        template.setInterceptors(new ClientInterceptor[]{new SoapRequestResponseInterceptor()});

        // Optionally, set a message sender (e.g., for HTTP)
        template.setMessageSender(webServiceMessageSender());

        return template;
    }

    @Bean
    public WebServiceMessageSender webServiceMessageSender() {
        return new HttpComponentsMessageSender(); // Use HTTP message sender (can be customized)
    }

    // Custom interceptor to log SOAP request and response
    private static class SoapRequestResponseInterceptor implements ClientInterceptor {

        @Override
        public boolean handleRequest(MessageContext messageContext) throws IOException {
            logMessage("SOAP Request Message:", messageContext.getRequest());
            return true;
        }

        @Override
        public boolean handleResponse(MessageContext messageContext) throws IOException {
            logMessage("SOAP Response Message:", messageContext.getResponse());
            return true;
        }

        @Override
        public boolean handleFault(MessageContext messageContext) throws IOException {
            logMessage("SOAP Fault Message:", messageContext.getResponse());
            return true;
        }

        @Override
        public void afterCompletion(MessageContext messageContext, Exception ex) throws IOException {
            // Do nothing
        }

        private void logMessage(String logMessage, Object message) throws IOException {
            if (message instanceof SoapMessage) {
                SoapMessage soapMessage = (SoapMessage) message;
                try {
                    StringWriter writer = new StringWriter();
                    soapMessage.writeTo(writer);
                    System.out.println(logMessage);
                    System.out.println(writer.toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
import com.example.generated.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ws.client.core.WebServiceTemplate;

@Service
public class SoapClientService {

    private final WebServiceTemplate webServiceTemplate;

    @Autowired
    public SoapClientService(WebServiceTemplate webServiceTemplate) {
        this.webServiceTemplate = webServiceTemplate;
    }

    public ResponseType sendSoapRequest(RequestType request) {
        // Replace "RequestType" and "ResponseType" with your actual generated request and response types
        ObjectFactory factory = new ObjectFactory();
        
        // Create a JAXBElement from the request object
        JAXBElement<RequestType> requestElement = factory.createYourRequestType(request);
        
        // Set the endpoint URL of the SOAP service
        String endpointUrl = "http://your-soap-service-url";
        
        // Make the actual call and cast the response to your response type
        JAXBElement<ResponseType> responseElement = (JAXBElement<ResponseType>) webServiceTemplate.marshalSendAndReceive(endpointUrl, requestElement);
        
        // Process the response as needed
        ResponseType response = responseElement.getValue();
        
        return response;
    }
}
import org.springframework.core.convert.converter.Converter;
import javax.xml.datatype.XMLGregorianCalendar;
import java.util.Date;

public class XMLGregorianCalendarToDateConverter implements Converter<XMLGregorianCalendar, Date> {
    @Override
    public Date convert(XMLGregorianCalendar source) {
        if (source == null) {
            return null;
        }
        return source.toGregorianCalendar().getTime();
    }
}
import org.springframework.core.convert.converter.Converter;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.util.Date;
import java.util.GregorianCalendar;

public class DateToXMLGregorianCalendarConverter implements Converter<Date, XMLGregorianCalendar> {
    @Override
    public XMLGregorianCalendar convert(Date source) {
        if (source == null) {
            return null;
        }
        try {
            GregorianCalendar gregorianCalendar = new GregorianCalendar();
            gregorianCalendar.setTime(source);
            return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
        } catch (Exception e) {
            throw new RuntimeException("Error converting Date to XMLGregorianCalendar", e);
        }
    }
}
