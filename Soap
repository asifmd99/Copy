import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.ws.client.core.WebServiceTemplate;
import org.springframework.ws.transport.http.HttpComponentsMessageSender;

@Configuration
public class SoapClientConfig {

    @Bean
    public WebServiceTemplate webServiceTemplate() {
        WebServiceTemplate webServiceTemplate = new WebServiceTemplate();
        webServiceTemplate.setDefaultUri("http://example.com/your-soap-api-endpoint");
        webServiceTemplate.setMessageSender(httpComponentsMessageSender());
        return webServiceTemplate;
    }

    @Bean
    public HttpComponentsMessageSender httpComponentsMessageSender() {
        return new HttpComponentsMessageSender();
    }
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ws.client.core.WebServiceTemplate;
import example.com.your.generated.package.YourRequestClass;
import example.com.your.generated.package.YourResponseClass;

@Service
public class SoapClientService {

    @Autowired
    private WebServiceTemplate webServiceTemplate;

    public YourResponseClass callSoapService(YourRequestClass request) {
        return (YourResponseClass) webServiceTemplate.marshalSendAndReceive(request);
    }
}
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;
import example.com.your.generated.package.YourRequestClass;
import example.com.your.generated.package.YourResponseClass;

@Service
public class KafkaConsumerService {

    @Autowired
    private SoapClientService soapClientService;

    @KafkaListener(topics = "your_topic", groupId = "group_id", containerFactory = "kafkaListenerContainerFactory")
    public void consume(UserMessage message) {
        // Create a request object for the SOAP service
        YourRequestClass request = new YourRequestClass();
        // Populate the request object using the message fields
        request.setSomeField(message.getSomeField());

        // Call the SOAP service
        YourResponseClass response = soapClientService.callSoapService(request);

        // Merge the response into the UserMessage object
        message.setResponseField(response.getResponseField());

        // Process the updated UserMessage object as needed
        processUserMessage(message);
    }

    private void processUserMessage(UserMessage message) {
        // Implement your processing logic here
    }
}


---------------HOw to configure kafka  for multiple type of  serialiser deserialiser
Understand grouping in kafka consumer 
---------------Flow ----------
 AdminClientConfig values: 
kafka commid id stuff
consumerconfig values
Group was my group - client.id = consumer-myGroup-1
Kafka commiitid,consumerconfig
-------------------------------------
Delete zip  delete .idea files 
--------------------------- 1--------------------------
Remove kafka--  - Create a new file  without mongo Example - class account and site class
                -  Test soap url - how to put headers in place
                -  directly store to mongoDb 
                -  Check if its working
                -  Integrate kafka
------------------------2---------------------
Check week3day4 updated on week5day2 

--------------------------------------------

Create 5 test files - one with kafka example and other without kafka Example  no mongodb in both
----------------------------------------
Try checking for making configuration of both kafka Producer and consumer,
---------------------------------------
if nothing works delete Gradle  file then Restartv
-----------------------------------
Where to integrate kafka Streams
-----------------------------------------------------------------------------------------------------------------------------
how groupid in kafka consumer works what will happen if 2 kafka listener listening to same topic with same group id and function parameters
Key Points
Parallel Consumption: The two listeners (listen1 and listen2) will consume messages in parallel, each handling different partitions of the topic.
No Message Duplication: Each message will be consumed by only one of the listeners, ensuring no duplication within the consumer group.
Load Balancing: Kafka will balance the load between the two listeners, distributing the partitions equally (as much as possible).
Fault Tolerance: If one listener stops, the remaining listener will take over its partitions, ensuring continuous message consumption.

--------------------------------------------------------------------------------------------------------------------------
if 2 differenet function parameter same topic same group
 create a custom deserialiser class 
import org.apache.kafka.common.serialization.Deserializer;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Map;

public class CustomDeserializer implements Deserializer<Object> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void configure(Map<String, ?> configs, boolean isKey) {
        // Configure the deserializer if needed
    }

    @Override
    public Object deserialize(String topic, byte[] data) {
        try {
            // Deserialize based on some logic, such as a class type indicator
            String content = new String(data);
            if (content.startsWith("{")) {
                // Assuming JSON object, change MyClass to your target class
                return objectMapper.readValue(data, MyClass.class);
            } else {
                return content;
            }
        } catch (Exception e) {
            throw new RuntimeException("Error deserializing message", e);
        }
    }

    @Override
    public void close() {
        // Close resources if needed
    }
}
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;

import java.util.HashMap;
import java.util.Map;

@Configuration
@EnableKafka
public class KafkaConsumerConfig {

    private final String bootstrapServers = "localhost:9092";
    private final String groupId = "my-group-id";

    @Bean
    public ConsumerFactory<String, Object> consumerFactory() {
        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, CustomDeserializer.class);
        return new DefaultKafkaConsumerFactory<>(props);
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, Object> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, Object> factory = new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        return factory;
    }
}

Behavior of Kafka Listeners with Different Parameters
Message Handling:

Each listener will receive messages according to the deserialization logic.
listenWithString will receive messages that can be deserialized into a String.
listenWithObject will receive messages that can be deserialized into MyClass.
When Kafka listeners have different function parameters but share the same group.id, they will consume messages from the same topic based on the partition assignment by Kafka. Each listener will handle messages according to its deserialization logic and expected parameter type. Proper configuration of deserialization and message format is essential to ensure that each listener can process the messages it receives.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
for 2 types of object in kafka consumer

ChatGPT
To handle multiple types of objects in a Kafka consumer, you can implement a dynamic deserialization strategy that differentiates between the types of messages based on some metadata (like headers) or content structure. Here’s how you can achieve this in a Spring Boot application using Apache Kafka:

—------------------------------Consuming Soap web services- —-------------------------------------
build our soap Client
Webservice and devtools
To develop the client we need all the binding classes  - from wsdl to generate plugin for that
Now that we got the binding class we need one marshaller to convert our obj to xml
 Basically created config for the binding classes
 Create client using webservice template- need uri and request
Create rest api to check with req object in body (for postman json) will return a json



—------------------------Kafka Consumer—-------------------------
We get that au field then put it in req obj - 
how to put the values in req obj ( for above postman he did it  manually)
	Should we do it using setter or something else 
	Either we can use jaxb classes generated by plugin or commandline
Or Request string from code generated 
—------------------------------------------------------------------------



XSD: Defines the XML structure.
JAXB: Automatically generates Java classes from XSD, reducing manual XML handling.
WebServiceTemplate: Simplifies sending and receiving SOAP messages.
Service Layer: Separates concerns and improves reusability and testability.
Kafka Listener: Enables asynchronous processing and decouples producers from consumers.

	plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
    implementation 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:1.11.1'
}

task xjc(type: JavaExec) {
    main = 'com.sun.tools.xjc.XJCFacade'
    classpath = configurations.compile + configurations.compileOnly
    args = [
        '-d', 'src/main/java',
        '-p', 'com.example.generated',  // Package for generated classes
        'src/main/resources/schema.xsd'
    ]
}

compileJava.dependsOn xjc

plugins {
    id 'java'
    id 'org.unbroken-dome.xjc' version '2.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
}

xjc {
    javaGen {
        schemaFiles = fileTree('src/main/resources') {
            include 'schema.xsd'
        }
        outputDirectory = file('src/main/java')
        packageName = 'com.example.generated'  // Package for generated classes
    }
}
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>my-xml-binding-project</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.3.2</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxb2-maven-plugin</artifactId>
                <version>2.5.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>xjc</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <schemaDirectory>${project.basedir}/src/main/resources</schemaDirectory>
                    <outputDirectory>${project.basedir}/src/main/java</outputDirectory>
                    <clearOutputDir>false</clearOutputDir>
                    <packageName>com.example.generated</packageName> <!-- Package for generated classes -->
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
plugins {
    id 'java'
    id 'org.unbroken-dome.xjc' version '2.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
    implementation 'javax.activation:activation:1.1.1'
}

xjc {
    // Define a task to generate Java classes from XSD
    generate {
        source = fileTree('src/main/resources/xsd') {
            include '**/*.xsd'
        }
        targetPackage = 'com.example.generated'  // Package for generated classes
        outputDirectory = file("$buildDir/generated-sources/xjc")
    }
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-sources/xjc"
        }
    }
}

compileJava {
    dependsOn xjcGenerate
}



plugins {
    id 'java'
    id 'org.unbroken-dome.xjc' version '2.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
    implementation 'javax.activation:activation:1.1.1'
}

xjc {
    // Define a task to generate Java classes from XSD
    generate {
        source = fileTree('src/main/resources/xsd') {
            include '**/*.xsd'
        }
        targetPackage = 'com.example.generated'  // Package for generated classes
        outputDirectory = file("$buildDir/generated-sources/xjc")
    }
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-sources/xjc"
        }
    }
}

compileJava {
    dependsOn xjcGenerate
}


